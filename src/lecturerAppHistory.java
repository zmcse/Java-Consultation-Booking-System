
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author zoemariechor
 */
public class lecturerAppHistory extends javax.swing.JFrame {
    private String lecturerID; 

    // Constructor for the lecturerAppHistory class.
    public lecturerAppHistory(String lecturerID) {
        this.lecturerID = lecturerID;
        initComponents();
        loadConsultations();
    }

    // Method to load completed consultations specific to the lecturer.
    private void loadConsultations() {
        DefaultListModel<String> model = new DefaultListModel<>();
        try (BufferedReader reader = new BufferedReader(new FileReader("consultation.txt"))) {
            String line;
            int lineIndex = 0;

            while ((line = reader.readLine()) != null) {
                lineIndex++;
                if (lineIndex == 1) continue; // Skip the header line.

                String[] parts = line.split(",");
                if (parts.length >= 8) {
                    String consultationDate = parts[3];
                    String consultationTime = parts[4];
                    String studentID = parts[2];
                    String status = parts[5];
                    String lecturerFeedback = parts[6].trim(); 
                    String studentFeedback = parts[7].trim(); 

                    System.out.println("Read Line: " + line);
                    System.out.println("Status: " + status + ", Lecturer ID: " + parts[1].trim());

                    // Check if the consultation is "Completed" and matches the current lecturerID.
                    if (status.equalsIgnoreCase("Completed") && lecturerID.equals(parts[1].trim())) {
                        // Add formatted consultation details to the list model.
                        model.addElement(String.format("%s | %s | %s | %s | %s",
                            consultationDate,
                            consultationTime,
                            getName(studentID), // Get the student name using studentID.
                            lecturerFeedback,
                            studentFeedback));
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        ListLAH.setModel(model);
    }
    
    // Method to get the name of a user (student) based on their ID from user.txt.
    private String getName(String lecturerID) {
        try (BufferedReader reader = new BufferedReader(new FileReader("user.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 3 && parts[0].equals(lecturerID)) {
                    return parts[1]; // Return the user's name if the ID matches.
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null; 
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DBButtonLAH = new javax.swing.JButton();
        UpButtonLAH = new javax.swing.JButton();
        ResButtonLAH = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListLAH = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        LFBInputLAH = new javax.swing.JTextArea();
        SubmitButtonLAH = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        DBButtonLAH.setText("Dashboard");
        DBButtonLAH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DBButtonLAHActionPerformed(evt);
            }
        });

        UpButtonLAH.setText("Upcoming");
        UpButtonLAH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpButtonLAHActionPerformed(evt);
            }
        });

        ResButtonLAH.setText("Reschedules");
        ResButtonLAH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResButtonLAHActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Big Caslon", 0, 18)); // NOI18N
        jLabel1.setText("Appointment History");

        jScrollPane1.setViewportView(ListLAH);

        jLabel2.setFont(new java.awt.Font("Big Caslon", 0, 14)); // NOI18N
        jLabel2.setText("Write Feedback");

        LFBInputLAH.setColumns(20);
        LFBInputLAH.setRows(5);
        jScrollPane2.setViewportView(LFBInputLAH);

        SubmitButtonLAH.setText("Submit");
        SubmitButtonLAH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonLAHActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(DBButtonLAH)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(UpButtonLAH)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ResButtonLAH))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(SubmitButtonLAH)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)))))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DBButtonLAH)
                    .addComponent(UpButtonLAH)
                    .addComponent(ResButtonLAH))
                .addGap(39, 39, 39)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(SubmitButtonLAH)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DBButtonLAHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DBButtonLAHActionPerformed
        lecturerDashboard lecturerDashboard = new lecturerDashboard(lecturerID);
        lecturerDashboard.setVisible(true); 
        this.dispose(); 
    }//GEN-LAST:event_DBButtonLAHActionPerformed

    private void UpButtonLAHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpButtonLAHActionPerformed
        lecturerMyAppointment lecturerMyAppointment = new lecturerMyAppointment(lecturerID);
        lecturerMyAppointment.setVisible(true); 
        this.dispose(); 
    }//GEN-LAST:event_UpButtonLAHActionPerformed

    private void ResButtonLAHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResButtonLAHActionPerformed
        lecturerAppReschedule lecturerAppReschedule = new lecturerAppReschedule(lecturerID);
        lecturerAppReschedule.setVisible(true); 
        this.dispose(); 
    }//GEN-LAST:event_ResButtonLAHActionPerformed

    private void SubmitButtonLAHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonLAHActionPerformed
        String selectedConsultation = ListLAH.getSelectedValue();
        String feedback = LFBInputLAH.getText().trim();

        // Check if a consultation is selected and feedback is entered.
        if (selectedConsultation == null || feedback.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a consultation and write feedback before submitting.");
            return;
        }

        File inputFile = new File("consultation.txt");
        File tempFile = new File("consultation_temp.txt");

        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String line;
            boolean isFirstLine = true; 

            while ((line = reader.readLine()) != null) {
                if (isFirstLine) {
                    isFirstLine = false;
                    writer.write(line);
                    writer.newLine();
                    continue;
                }

                String[] parts = line.split(",", -1); 
                if (parts.length < 9) {
                    writer.write(line);
                    writer.newLine();
                    continue;
                }

                // Check if the selected consultation matches the current line's details and the lecturerID.
                if (selectedConsultation.contains(parts[3]) && selectedConsultation.contains(parts[4]) && parts[1].trim().equals(lecturerID)) {
                    parts[6] = feedback.isEmpty() ? " " : feedback; 
                    JOptionPane.showMessageDialog(this, "Feedback submitted successfully!");
                }

                writer.write(String.join(",", parts));
                writer.newLine();
            }

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while updating feedback.");
            return;
        }

        // Replace the original file with the updated temporary file.
        if (inputFile.delete() && tempFile.renameTo(inputFile)) {
            JOptionPane.showMessageDialog(this, "Feedback successfully updated.");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update feedback.");
        }

        LFBInputLAH.setText(""); //Clear the feedback input field.
        loadConsultations();
    }//GEN-LAST:event_SubmitButtonLAHActionPerformed

    /**
     * @param args the command line arguments
     */

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> new lecturerAppHistory("testLecturerID").setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DBButtonLAH;
    private javax.swing.JTextArea LFBInputLAH;
    private javax.swing.JList<String> ListLAH;
    private javax.swing.JButton ResButtonLAH;
    private javax.swing.JButton SubmitButtonLAH;
    private javax.swing.JButton UpButtonLAH;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
