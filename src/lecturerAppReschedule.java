/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
/**
 *
 * @author zoemariechor
 */
public class lecturerAppReschedule extends javax.swing.JFrame {
    private String lecturerID; 

    //Constructor for lecturerAppReschedule class.
    public lecturerAppReschedule(String lecturerID) {
        this.lecturerID = lecturerID; 
        initComponents();
        loadReschedules();
    }

    // Method to load pending and rescheduled consultations for the lecturer.
    private void loadReschedules() {
        DefaultListModel<String> model = new DefaultListModel<>();
        try (BufferedReader br = new BufferedReader(new FileReader("consultation.txt"))) {
            String line;
            br.readLine(); 
            while ((line = br.readLine()) != null) {
                String[] columns = line.split(",", -1); 
                if (columns.length >= 8) { 
                    String fileLecturerID = columns[1].trim();
                    String status = columns[5].trim();

                    if (fileLecturerID.equals(lecturerID) && ("Pending".equals(status) || "Reschedule".equals(status))) {
                        model.addElement(String.join(",", columns));
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        ResListARL.setModel(model);
    }

    // Method to process the reschedule action (Approve or Reject) for a selected consultation.
    private void processRescheduleAction(String consultationLine, String action) {
        String rescheduleID = consultationLine.split(",")[8].trim(); 
        ArrayList<String> updatedLines = new ArrayList<>();
        DefaultListModel<String> model = (DefaultListModel<String>) ResListARL.getModel();

        try (BufferedReader br = new BufferedReader(new FileReader("consultation.txt"))) {
            String line;
            boolean updated = false;

            while ((line = br.readLine()) != null) {
                if (!line.startsWith("ConsultationID") && line.contains(rescheduleID)) { 
                    String[] columns = line.split(",", -1); 
                    if (action.equals("Approve")) {
                        if ("Pending".equals(columns[5])) {
                            columns[5] = "Booked";
                        } else if ("Reschedule".equals(columns[5])) {
                            columns[5] = "Available";
                        }
                    } else if (action.equals("Reject")) {
                        if ("Pending".equals(columns[5])) {
                            columns[5] = "Available";
                        } else if ("Reschedule".equals(columns[5])) {
                            columns[5] = "Booked";
                        }
                    }
                    columns[8] = ""; 
                    updatedLines.add(String.join(",", columns)); 
                    updated = true;
                } else {
                    updatedLines.add(line);
                }
            }

            if (updated) {
                try (FileWriter fw = new FileWriter("consultation.txt")) {
                    for (String updatedLine : updatedLines) {
                        fw.write(updatedLine.trim() + "\n"); 
                    }
                }

                // Update the model by removing the rescheduled consultation from the list
                for (int i = model.getSize() - 1; i >= 0; i--) {
                    if (model.getElementAt(i).split(",", -1)[8].trim().equals(rescheduleID)) {
                        model.remove(i);
                    }
                }

                loadReschedules();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DBButtonARL = new javax.swing.JButton();
        UPButtonARL = new javax.swing.JButton();
        HisButtonARL = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ResListARL = new javax.swing.JList<>();
        ApproveButtonARL = new javax.swing.JButton();
        RejectButtonARL = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        DBButtonARL.setText("Dashboard");
        DBButtonARL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DBButtonARLActionPerformed(evt);
            }
        });

        UPButtonARL.setText("Upcoming");
        UPButtonARL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UPButtonARLActionPerformed(evt);
            }
        });

        HisButtonARL.setText("History");
        HisButtonARL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HisButtonARLActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Big Caslon", 0, 18)); // NOI18N
        jLabel1.setText("Reschedules");

        jScrollPane1.setViewportView(ResListARL);

        ApproveButtonARL.setText("Approve");
        ApproveButtonARL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApproveButtonARLActionPerformed(evt);
            }
        });

        RejectButtonARL.setText("Reject");
        RejectButtonARL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RejectButtonARLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(DBButtonARL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(UPButtonARL)
                        .addGap(18, 18, 18)
                        .addComponent(HisButtonARL))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 27, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ApproveButtonARL)
                    .addComponent(RejectButtonARL))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DBButtonARL)
                    .addComponent(UPButtonARL)
                    .addComponent(HisButtonARL))
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ApproveButtonARL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RejectButtonARL)))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UPButtonARLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UPButtonARLActionPerformed
        lecturerMyAppointment lecturerMyAppointment = new lecturerMyAppointment(lecturerID);
        lecturerMyAppointment.setVisible(true); 
        this.dispose(); 
    }//GEN-LAST:event_UPButtonARLActionPerformed

    private void ApproveButtonARLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApproveButtonARLActionPerformed
        String selectedValue = ResListARL.getSelectedValue();
        if (selectedValue != null) {
            processRescheduleAction(selectedValue, "Approve");
        }
    }//GEN-LAST:event_ApproveButtonARLActionPerformed

    private void RejectButtonARLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RejectButtonARLActionPerformed
        String selectedValue = ResListARL.getSelectedValue();
        if (selectedValue != null) {
            processRescheduleAction(selectedValue, "Reject");
        }
    }//GEN-LAST:event_RejectButtonARLActionPerformed

    private void DBButtonARLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DBButtonARLActionPerformed
        lecturerDashboard lecturerDashboard = new lecturerDashboard(lecturerID);
        lecturerDashboard.setVisible(true); 
        this.dispose(); 
    }//GEN-LAST:event_DBButtonARLActionPerformed

    private void HisButtonARLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HisButtonARLActionPerformed
        lecturerMyAppointment lecturerMyAppointment = new lecturerMyAppointment(lecturerID); 
        lecturerMyAppointment.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_HisButtonARLActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            String testLecturerID = "LT001"; 
            new lecturerAppReschedule(testLecturerID).setVisible(true);
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApproveButtonARL;
    private javax.swing.JButton DBButtonARL;
    private javax.swing.JButton HisButtonARL;
    private javax.swing.JButton RejectButtonARL;
    private javax.swing.JList<String> ResListARL;
    private javax.swing.JButton UPButtonARL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
