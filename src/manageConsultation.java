/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.DefaultListModel;
import java.text.ParseException;
import java.text.SimpleDateFormat;


/**
 *
 * @author zoemariechor
 */
public class manageConsultation extends javax.swing.JFrame {
    private String lecturerID;

    //Constructor for manageConsultation class.
    public manageConsultation(String lecturerID) {
        this.lecturerID = lecturerID; 
        initComponents();
        loadConsultationSlots();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CSListMCL = new javax.swing.JList<>();
        AddSlotButtonMCL = new javax.swing.JButton();
        DeleteSlotButtonMCL = new javax.swing.JButton();
        DashboardButtonMCL = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        AddDateInpMCL = new javax.swing.JTextField();
        AddTimeInpMCL = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Big Caslon", 0, 18)); // NOI18N
        jLabel1.setText("Manage Consultation");

        CSListMCL.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                CSListMCLAncestorRemoved(evt);
            }
        });
        jScrollPane1.setViewportView(CSListMCL);

        AddSlotButtonMCL.setText("Add Slot");
        AddSlotButtonMCL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddSlotButtonMCLActionPerformed(evt);
            }
        });

        DeleteSlotButtonMCL.setText("Delete Slot");
        DeleteSlotButtonMCL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteSlotButtonMCLActionPerformed(evt);
            }
        });

        DashboardButtonMCL.setText("Dashboard");
        DashboardButtonMCL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DashboardButtonMCLActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Big Caslon", 0, 14)); // NOI18N
        jLabel2.setText("Add Consultation Slot");

        jLabel3.setFont(new java.awt.Font("Big Caslon", 0, 14)); // NOI18N
        jLabel3.setText("Consultation Slots");

        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Date (yyyy-mm-dd):");

        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Time (hh:mm):");

        AddDateInpMCL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddDateInpMCLActionPerformed(evt);
            }
        });

        AddTimeInpMCL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTimeInpMCLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AddSlotButtonMCL)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(AddDateInpMCL, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                    .addComponent(AddTimeInpMCL)))
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DeleteSlotButtonMCL)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(DashboardButtonMCL))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(jLabel1)))
                .addGap(56, 81, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DashboardButtonMCL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DeleteSlotButtonMCL)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(AddDateInpMCL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(AddTimeInpMCL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(AddSlotButtonMCL)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DashboardButtonMCLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DashboardButtonMCLActionPerformed
        lecturerDashboard lecturerDashboard = new lecturerDashboard(lecturerID); 
        lecturerDashboard.setVisible(true); 
        this.dispose(); 
    }//GEN-LAST:event_DashboardButtonMCLActionPerformed

    private void DeleteSlotButtonMCLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteSlotButtonMCLActionPerformed
        int selectedIndex = CSListMCL.getSelectedIndex(); 
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select a slot to delete.");
            return;
        }

        String selectedSlot = CSListMCL.getSelectedValue();
        String selectedConsultationID = selectedSlot.split(" - ")[0]; 

        try {
            File inputFile = new File("consultation.txt");
            File tempFile = new File("temp_consultation.txt");

            // Setup BufferedReader to read from the original consultation file
            BufferedReader reader = new BufferedReader(new FileReader(inputFile));
            // Setup BufferedWriter to write to the temporary file
            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

            String line;
            int newID = 1; 
            boolean isFirstRow = true; 

            // Read each line from the consultation file
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (isFirstRow) {
                    writer.write(line);
                    writer.newLine();
                    isFirstRow = false;
                } else if (!parts[0].equals(selectedConsultationID)) {
                    parts[0] = "C" + newID;
                    writer.write(String.join(",", parts));
                    writer.newLine();
                    newID++;
                }
            }

            reader.close();
            writer.close();

            // If the slot was deleted successfully, replace the original file with the updated file
            if (inputFile.delete()) {
                tempFile.renameTo(inputFile);
            }

            JOptionPane.showMessageDialog(this, "Consultation slot deleted and IDs updated successfully!");
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while deleting the consultation slot.");
        }

        loadConsultationSlots();
    }//GEN-LAST:event_DeleteSlotButtonMCLActionPerformed

    private void CSListMCLAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_CSListMCLAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_CSListMCLAncestorRemoved

    private void AddTimeInpMCLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTimeInpMCLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddTimeInpMCLActionPerformed

    private void AddDateInpMCLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddDateInpMCLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddDateInpMCLActionPerformed

    private void AddSlotButtonMCLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddSlotButtonMCLActionPerformed
        // Get the date and time inputs from the respective fields
        String date = AddDateInpMCL.getText().trim();
        String time = AddTimeInpMCL.getText().trim();

        // Validate the date and time format
        if (!isValidDate(date) || !isValidTime(time)) {
            JOptionPane.showMessageDialog(this, "Please enter a valid Date (YYYY-MM-DD) and Time (HH:MM).");
            return;
        }

        // Generate a new consultation ID
        String consultationID = generateConsultationID();
        String status = "Available";

        try (BufferedWriter writer = new BufferedWriter(new FileWriter("consultation.txt", true))) {
            // Write the new consultation slot details to the file
            writer.write(consultationID + "," + lecturerID + ",," + date + "," + time + "," + status + ", , ,");
            writer.newLine();
            JOptionPane.showMessageDialog(this, "Consultation Slot Added Successfully!");
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while adding the consultation slot.");
        }

        // Clear the input fields after adding
        AddDateInpMCL.setText("");
        AddTimeInpMCL.setText("");
        
        // Reload the consultation slots to reflect the new addition
        loadConsultationSlots();
    
    }//GEN-LAST:event_AddSlotButtonMCLActionPerformed
    private boolean isValidDate(String date) {
        // Create a SimpleDateFormat instance to parse the date
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        dateFormat.setLenient(false);
        try {
            dateFormat.parse(date);
            return true;
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Please use 'yyyy-MM-dd'.");
            return false;
        }
    }

    private boolean isValidTime(String time) {
        // Create a SimpleDateFormat instance to parse the time
        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
        timeFormat.setLenient(false);
        try {
            timeFormat.parse(time);
            return true;
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid time format. Please use 'HH:mm'.");
            return false;
        }
    }

    // Method to generate consultationID 
    private String generateConsultationID() {
        int consultationCount = -1;
        try (BufferedReader br = new BufferedReader(new FileReader("consultation.txt"))) {
            while (br.readLine() != null) {
                consultationCount++;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return "C" + (consultationCount + 1);
    }

    // Method to load available consultation slots
    private void loadConsultationSlots() {
        DefaultListModel<String> listModel = new DefaultListModel<>();

        try (BufferedReader br = new BufferedReader(new FileReader("consultation.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 6 && parts[1].equals(lecturerID)) {
                    String consultationID = parts[0];
                    String date = parts[3];
                    String time = parts[4];
                    String status = parts[5]; 
                    String slot = consultationID + " - " + date + " " + time + " [" + status + "]";
                    listModel.addElement(slot);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while loading consultation slots.");
        }

        CSListMCL.setModel(listModel);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            String testLecturerID = "LT001"; 
            new manageConsultation(testLecturerID).setVisible(true);
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AddDateInpMCL;
    private javax.swing.JButton AddSlotButtonMCL;
    private javax.swing.JTextField AddTimeInpMCL;
    private javax.swing.JList<String> CSListMCL;
    private javax.swing.JButton DashboardButtonMCL;
    private javax.swing.JButton DeleteSlotButtonMCL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
