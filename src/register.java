/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import javax.swing.*;
import java.io.*;
import java.util.Scanner;

/**
 *
 * @author zoemariechor
 */
public class register extends javax.swing.JFrame {

    //Constructor for register class.
    public register() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        LoginButtonRegister = new javax.swing.JButton();
        RegisterButtonRegister = new javax.swing.JButton();
        IDInputRegister = new javax.swing.JTextField();
        NameInputRegister = new javax.swing.JTextField();
        PWInputRegister = new javax.swing.JPasswordField();
        CPWInputRegister = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Big Caslon", 0, 18)); // NOI18N
        jLabel1.setText("APU Psychology Consultation");

        jLabel2.setFont(new java.awt.Font("Big Caslon", 0, 14)); // NOI18N
        jLabel2.setText("Registration");

        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("ID:");

        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Password:");

        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Name:");

        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("Confirm Password:");

        LoginButtonRegister.setText("Login");
        LoginButtonRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginButtonRegisterActionPerformed(evt);
            }
        });

        RegisterButtonRegister.setText("Register");
        RegisterButtonRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterButtonRegisterActionPerformed(evt);
            }
        });

        IDInputRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDInputRegisterActionPerformed(evt);
            }
        });

        NameInputRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameInputRegisterActionPerformed(evt);
            }
        });

        PWInputRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PWInputRegisterActionPerformed(evt);
            }
        });

        CPWInputRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPWInputRegisterActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Silom", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 102, 153));
        jLabel7.setText("APU");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CPWInputRegister))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(LoginButtonRegister)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RegisterButtonRegister))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4))
                                .addGap(59, 59, 59)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(IDInputRegister)
                                    .addComponent(NameInputRegister)
                                    .addComponent(PWInputRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(jLabel2)))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(IDInputRegister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(NameInputRegister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(PWInputRegister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(CPWInputRegister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoginButtonRegister)
                    .addComponent(RegisterButtonRegister))
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RegisterButtonRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterButtonRegisterActionPerformed
        // Handle user registration.
        String userId = IDInputRegister.getText();
        String name = NameInputRegister.getText();
        String password = new String(PWInputRegister.getPassword());
        String confirmPassword = new String(CPWInputRegister.getPassword());

        // Check for empty fields.
        if (userId.isEmpty() || name.isEmpty() || password.isEmpty() || confirmPassword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.");
            return;
        }

        // Check if passwords match.
        if (!password.equals(confirmPassword)) {
            JOptionPane.showMessageDialog(this, "Passwords do not match. Please try again.");
            return;
        }

        // Check if ID already exists.
        if (isIdExist(userId)) {
            JOptionPane.showMessageDialog(this, "ID already exists. Please login instead.");
            return;
        }

        // Determine user role based on ID prefix.
        String role = (userId.startsWith("ST")) ? "ST" : (userId.startsWith("LT")) ? "LT" : null;
        if (role == null) {
            JOptionPane.showMessageDialog(this, "Invalid ID format. ID should start with 'ST' for student or 'LT' for lecturer.");
            return;
        }
        
        // Save user to file and show success message.
        saveUserToFile(userId, name, password, role);
        JOptionPane.showMessageDialog(this, "Registration successful. Please login.");
        openLoginPage(); 

    }//GEN-LAST:event_RegisterButtonRegisterActionPerformed

    private void LoginButtonRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginButtonRegisterActionPerformed
        login loginPage = new login(); 
        loginPage.setVisible(true); 
        this.dispose(); 
    }//GEN-LAST:event_LoginButtonRegisterActionPerformed

    private void IDInputRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDInputRegisterActionPerformed
        // Check if the entered user ID is already registered.
        String userId = IDInputRegister.getText(); 
        try {
            File file = new File("user.txt");
            if (!file.exists()) {
                JOptionPane.showMessageDialog(this, "No users registered yet.");
                return;
            }

            Scanner scanner = null;
            try {
                scanner = new Scanner(file);
                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine();
                    String[] userDetails = line.split(",");
                    if (userDetails[0].equals(userId)) {
                        JOptionPane.showMessageDialog(this, "ID is already taken.");
                        return;
                    }
                }
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Error reading user data.");
            } finally {
                if (scanner != null) {
                    scanner.close();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occurred.");
        }
    }//GEN-LAST:event_IDInputRegisterActionPerformed
    private boolean isIdExist(String userId) {
        // Check if a given user ID exists in 'user.txt'.
        File file = new File("user.txt");
        if (!file.exists()) {
            return false;
        }

        try (Scanner scanner = new Scanner(file)) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] userDetails = line.split(",");
                if (userDetails[0].equals(userId)) {
                    return true;
                }
            }
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Error checking ID.");
        }
        return false;
    }

    // Save a new user’s data to 'user.txt'.
    private void saveUserToFile(String userId, String name, String password, String role) {
        try {
            File file = new File("user.txt");
            if (!file.exists()) {
                file.createNewFile();
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file, true))) {
                writer.write(userId + "," + name + "," + password + "," + role);
                writer.newLine(); 
                writer.flush(); 
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving user data: " + e.getMessage());
        }
    }

    // Open the login page and dispose of the current frame.
    private void openLoginPage() {
        login loginPage = new login(); 
        loginPage.setVisible(true);    
        this.dispose();                
    }
    private void NameInputRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameInputRegisterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NameInputRegisterActionPerformed

    private void PWInputRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PWInputRegisterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PWInputRegisterActionPerformed

    private void CPWInputRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPWInputRegisterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CPWInputRegisterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new register().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField CPWInputRegister;
    private javax.swing.JTextField IDInputRegister;
    private javax.swing.JButton LoginButtonRegister;
    private javax.swing.JTextField NameInputRegister;
    private javax.swing.JPasswordField PWInputRegister;
    private javax.swing.JButton RegisterButtonRegister;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    // End of variables declaration//GEN-END:variables
}
