/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.io.*;
import javax.swing.*;
/**
 *
 * @author zoemariechor
 */
public class studentAppHistory extends javax.swing.JFrame {
    private String studentID; 
    
    // Constructor for the studentAppHistory class.
    public studentAppHistory(String studentID) {
        this.studentID = studentID; 
        initComponents();
        loadConsultations();
    }
    
    // Loads consultation records specific to the current student with a 
    //"Completed" status and displays them in the ListSAH (likely a JList).
    private void loadConsultations() {
        DefaultListModel<String> model = new DefaultListModel<>();
        try (BufferedReader reader = new BufferedReader(new FileReader("consultation.txt"))) {
            String line;
            int lineIndex = 0;

            while ((line = reader.readLine()) != null) {
                lineIndex++;
                if (lineIndex == 1) continue; 

                String[] parts = line.split(",");
                if (parts.length >= 8) {
                    String consultationDate = parts[3];
                    String consultationTime = parts[4];
                    String lecturerID = parts[1];
                    String status = parts[5];
                    String lecturerFeedback = parts[6].trim(); 
                    String studentFeedback = parts[7].trim(); 

                    System.out.println("Read Line: " + line);
                    System.out.println("Status: " + status + ", Student ID: " + parts[2].trim());

                    if (status.equalsIgnoreCase("Completed") && studentID.equals(parts[2].trim())) {
                        model.addElement(String.format("%s | %s | %s | %s | %s",
                            consultationDate,
                            consultationTime,
                            getName(lecturerID),
                            lecturerFeedback,
                            studentFeedback));
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        ListSAH.setModel(model);
    }
    
    // Retrieves the name of a lecturer using their lecturerID by reading "user.txt".
    private String getName(String lecturerID) {
        try (BufferedReader reader = new BufferedReader(new FileReader("user.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 3 && parts[0].equals(lecturerID)) {
                    return parts[1]; // Return the lecturer's name.
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null; 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DBButtonSAH = new javax.swing.JButton();
        UpButtonSAH = new javax.swing.JButton();
        ResButtonSAH = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListSAH = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        SFBInputSAH = new javax.swing.JTextArea();
        SubmitButtonSAH = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        DBButtonSAH.setText("Dashboard");
        DBButtonSAH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DBButtonSAHActionPerformed(evt);
            }
        });

        UpButtonSAH.setText("Upcoming");
        UpButtonSAH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpButtonSAHActionPerformed(evt);
            }
        });

        ResButtonSAH.setText("Reschedules");
        ResButtonSAH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResButtonSAHActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Big Caslon", 0, 18)); // NOI18N
        jLabel1.setText("Appointment History");

        jScrollPane1.setViewportView(ListSAH);

        jLabel2.setFont(new java.awt.Font("Big Caslon", 0, 14)); // NOI18N
        jLabel2.setText("Write Feedback");

        SFBInputSAH.setColumns(20);
        SFBInputSAH.setRows(5);
        jScrollPane2.setViewportView(SFBInputSAH);

        SubmitButtonSAH.setText("Submit");
        SubmitButtonSAH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonSAHActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SubmitButtonSAH)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                                .addComponent(jScrollPane2))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(DBButtonSAH)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(UpButtonSAH)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ResButtonSAH)))))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DBButtonSAH)
                    .addComponent(UpButtonSAH)
                    .addComponent(ResButtonSAH))
                .addGap(33, 33, 33)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(SubmitButtonSAH)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DBButtonSAHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DBButtonSAHActionPerformed
        studentDashboard studentDashboard = new studentDashboard(studentID);
        studentDashboard.setVisible(true); 
        this.dispose(); 
    }//GEN-LAST:event_DBButtonSAHActionPerformed

    private void UpButtonSAHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpButtonSAHActionPerformed
        studentMyAppointment studentMyAppointment = new studentMyAppointment(studentID);
        studentMyAppointment.setVisible(true);
        this.dispose(); 
    }//GEN-LAST:event_UpButtonSAHActionPerformed

    private void ResButtonSAHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResButtonSAHActionPerformed
        studentAppReschedule studentAppReschedule = new studentAppReschedule(studentID); 
        studentAppReschedule.setVisible(true); 
        this.dispose(); 
    }//GEN-LAST:event_ResButtonSAHActionPerformed

    private void SubmitButtonSAHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonSAHActionPerformed
        String selectedConsultation = ListSAH.getSelectedValue();
        String feedback = SFBInputSAH.getText().trim();

        // Validate that a consultation is selected and feedback is provided.
        if (selectedConsultation == null || feedback.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a consultation and write feedback before submitting.");
            return;
        }

        File inputFile = new File("consultation.txt");
        File tempFile = new File("consultation_temp.txt");

        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String line;
            boolean isFirstLine = true; 

            while ((line = reader.readLine()) != null) {
                if (isFirstLine) {
                    isFirstLine = false;
                    writer.write(line);
                    writer.newLine();
                    continue;
                }

                String[] parts = line.split(",", -1); 
                if (parts.length < 9) {
                    writer.write(line);
                    writer.newLine();
                    continue;
                }

                // Check if the selected consultation matches the date, time, and studentID.
                if (selectedConsultation.contains(parts[3]) && selectedConsultation.contains(parts[4]) && parts[2].trim().equals(studentID)) {
                    parts[7] = feedback.isEmpty() ? " " : feedback; // Ensure feedback is never null
                    JOptionPane.showMessageDialog(this, "Feedback submitted successfully!");
                }
                // Write the updated or unchanged line to the temporary file.
                writer.write(String.join(",", parts));
                writer.newLine();
            }

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while updating feedback.");
            return;
        }
        
        // Replace the original file with the updated temporary file.
        if (inputFile.delete() && tempFile.renameTo(inputFile)) {
            JOptionPane.showMessageDialog(this, "Feedback successfully updated.");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update feedback.");
        }

        SFBInputSAH.setText(""); // Clear the feedback input field.
        loadConsultations();
    }//GEN-LAST:event_SubmitButtonSAHActionPerformed

    /**
     * @param args the command line arguments
     */

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> new studentAppHistory("testStudentID").setVisible(true));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DBButtonSAH;
    private javax.swing.JList<String> ListSAH;
    private javax.swing.JButton ResButtonSAH;
    private javax.swing.JTextArea SFBInputSAH;
    private javax.swing.JButton SubmitButtonSAH;
    private javax.swing.JButton UpButtonSAH;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
