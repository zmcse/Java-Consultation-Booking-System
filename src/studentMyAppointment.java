import java.io.*;
import java.util.*;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author zoemariechor
 */
public class studentMyAppointment extends javax.swing.JFrame {
    private String studentID; 

    /**
     * Creates new form myAppointment
     */
    public studentMyAppointment(String studentID) {
        this.studentID = studentID; 
        initComponents();
        loadConsultations(); 
    }

    // Load consultations for the logged-in student.
    private void loadConsultations() {
        DefaultListModel<String> listModel = new DefaultListModel<>();
        File file = new File("consultation.txt");

        System.out.println("Looking for file at: " + file.getAbsolutePath());

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;

            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");

                if (parts.length >= 6) {
                    String consultationStudentID = parts[2].trim();
                    String status = parts[5].trim();
                    String lecturerID = parts[1].trim(); 

                    if (consultationStudentID.equals(studentID) && 
                        (status.equalsIgnoreCase("Booked") || status.equalsIgnoreCase("Approved Reschedule"))) {

                        String lecturerName = getName(lecturerID);

                        String consultationDetails = "ID: " + parts[0] + ", Lecturer: " + lecturerName +
                                                      " (" + lecturerID + ")" + ", Date: " + parts[3] +
                                                      ", Time: " + parts[4] + ", Status: " + status;

                        listModel.addElement(consultationDetails);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error reading consultations.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        ListMAS.setModel(listModel);
    }
    
    // Get lecturer name from user file using lecturer ID.
    private String getName(String lecturerID) {
        String name = "Unknown Lecturer"; 
        File file = new File("user.txt");

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;

            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");

                if (parts[0].trim().equals(lecturerID)) {
                    name = parts[1].trim();
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error reading user file.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        return name;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListMAS = new javax.swing.JList<>();
        HistoryButtonMAS = new javax.swing.JButton();
        ResButtonMAS = new javax.swing.JButton();
        ToResButtonMAS = new javax.swing.JButton();
        CancelButtonMAS = new javax.swing.JButton();
        DBButtonMAS = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListAAMAS = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        ConfirmButtonMAS = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Big Caslon", 0, 18)); // NOI18N
        jLabel1.setText("Upcoming Appointments");

        ListMAS.setName("MASList"); // NOI18N
        jScrollPane1.setViewportView(ListMAS);

        HistoryButtonMAS.setText("History");
        HistoryButtonMAS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistoryButtonMASActionPerformed(evt);
            }
        });

        ResButtonMAS.setText("Reschedules");
        ResButtonMAS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResButtonMASActionPerformed(evt);
            }
        });

        ToResButtonMAS.setText("Reschedule");
        ToResButtonMAS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToResButtonMASActionPerformed(evt);
            }
        });

        CancelButtonMAS.setText("Cancel");
        CancelButtonMAS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonMASActionPerformed(evt);
            }
        });

        DBButtonMAS.setText("Dashboard");
        DBButtonMAS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DBButtonMASActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(ListAAMAS);

        jLabel2.setFont(new java.awt.Font("Big Caslon", 0, 14)); // NOI18N
        jLabel2.setText("Available Appointments");

        ConfirmButtonMAS.setText("Confirm");
        ConfirmButtonMAS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmButtonMASActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(DBButtonMAS)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(HistoryButtonMAS)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ResButtonMAS))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(ToResButtonMAS)
                                .addGap(18, 18, 18)
                                .addComponent(CancelButtonMAS)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ConfirmButtonMAS)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel1)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HistoryButtonMAS)
                    .addComponent(ResButtonMAS)
                    .addComponent(DBButtonMAS))
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ToResButtonMAS)
                    .addComponent(CancelButtonMAS))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ConfirmButtonMAS)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HistoryButtonMASActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistoryButtonMASActionPerformed
        studentAppHistory studentAppHistory = new studentAppHistory(studentID); 
        studentAppHistory.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_HistoryButtonMASActionPerformed

    private void ResButtonMASActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResButtonMASActionPerformed
        studentAppReschedule studentAppReschedule = new studentAppReschedule(studentID); 
        studentAppReschedule.setVisible(true);
        this.dispose(); 
    }//GEN-LAST:event_ResButtonMASActionPerformed

    private void DBButtonMASActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DBButtonMASActionPerformed
        studentDashboard studentDashboard = new studentDashboard(studentID);
        studentDashboard.setVisible(true); 
        this.dispose();
    }//GEN-LAST:event_DBButtonMASActionPerformed

    private void ToResButtonMASActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToResButtonMASActionPerformed
        String selectedSlot = ListMAS.getSelectedValue();
        if (selectedSlot == null) {
            JOptionPane.showMessageDialog(this, "Please select a slot to reschedule.");
            return;
        }

        // Extract consultation ID from the selected slot
        String consultationID = selectedSlot.split(",")[0].split(":")[1].trim(); 
        String lecturerID = null;

        
        // Try to find the lecturer ID corresponding to the selected consultation
        try (BufferedReader reader = new BufferedReader(new FileReader("consultation.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts[0].equals(consultationID)) {
                    lecturerID = parts[1]; 
                    break;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading consultations: " + e.getMessage());
            return;
        }

        // If no lecturer ID is found, show an error message
        if (lecturerID == null) {
            JOptionPane.showMessageDialog(this, "Error: Unable to find lecturer ID for the selected slot.");
            return;
        }

        String lecturerName = getName(lecturerID);

        String rescheduleID = "C1_RES_" + consultationID;

        // Load available slots for the lecturer
        DefaultListModel<String> availableSlotsModel = new DefaultListModel<>();
        try (BufferedReader reader = new BufferedReader(new FileReader("consultation.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 6 && parts[1].equals(lecturerID) && parts[5].equals("Available")) {
                    String slotDetails = "ID: " + parts[0] + ", Lecturer: " + lecturerName + " (" + lecturerID + ")" + 
                                         ", Date: " + parts[3] + ", Time: " + parts[4];
                    availableSlotsModel.addElement(slotDetails);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading available slots: " + e.getMessage());
        }

        ListAAMAS.setModel(availableSlotsModel); 

        ConfirmButtonMAS.setActionCommand(rescheduleID);                 
    }//GEN-LAST:event_ToResButtonMASActionPerformed

    private void ConfirmButtonMASActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmButtonMASActionPerformed
        // Retrieve the reschedule ID from the action command of the button
        String rescheduleID = evt.getActionCommand(); 

        // Get the originally selected slot and the new slot from the lists
        String originalSlot = ListMAS.getSelectedValue();
        String newSlot = ListAAMAS.getSelectedValue();

        if (originalSlot == null || newSlot == null) {
            JOptionPane.showMessageDialog(this, "Please select both an original and a new slot.");
            return;
        }

        // Extract IDs from the original and new slots
        String originalID = originalSlot.split(",")[0].split(":")[1].trim();
        String newID = newSlot.split(",")[0].split(":")[1].trim();

        List<String> lines = new ArrayList<>();
        boolean updatedOriginal = false, updatedNew = false;

        // Update the status of the original and new slots in the file
        try (BufferedReader reader = new BufferedReader(new FileReader("consultation.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts[0].equals(originalID)) {
                    parts[5] = "Reschedule,,," + rescheduleID; 
                    updatedOriginal = true;
                } else if (parts[0].equals(newID)) {
                    parts[2] = studentID;  
                    parts[5] = "Pending,,," + rescheduleID;  
                    updatedNew = true;
                }
                lines.add(String.join(",", parts));
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading consultations: " + e.getMessage());
            return;
        }

        // If either the original or the new slot wasn't updated successfully, show an error message
        if (!updatedOriginal || !updatedNew) {
            JOptionPane.showMessageDialog(this, "Error: Unable to update the slots.");
            return;
        }

        // Save the updated lines back to the file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("consultation.txt"))) {
            for (String updatedLine : lines) {
                writer.write(updatedLine);
                writer.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving updates: " + e.getMessage());
            return;
        }

        JOptionPane.showMessageDialog(this, "Reschedule request submitted. Check rescheduling page for approval.");
        loadConsultations(); 
    }//GEN-LAST:event_ConfirmButtonMASActionPerformed

    private void CancelButtonMASActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonMASActionPerformed
        // Get the selected slot from the list
        String selectedSlot = ListMAS.getSelectedValue();
        if (selectedSlot == null) {
            JOptionPane.showMessageDialog(this, "Please select a slot to cancel.");
            return;
        }

        // Extract consultation ID from the selected slot
        String consultationID = selectedSlot.split(",")[0].split(":")[1].trim();
        List<String> lines = new ArrayList<>();
        boolean updated = false;

        // Try to find and update the slot status to "Available"
        try (BufferedReader reader = new BufferedReader(new FileReader("consultation.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts[0].equals(consultationID)) {
                    parts[5] = "Available";
                    updated = true;
                }
                lines.add(String.join(",", parts));
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading consultations: " + e.getMessage());
            return;
        }

        // If no matching slot was found, show an error message
        if (!updated) {
            JOptionPane.showMessageDialog(this, "Error: Unable to update the slot status.");
            return;
        }

        // Save the updated lines back to the file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("consultation.txt"))) {
            for (String updatedLine : lines) {
                writer.write(updatedLine);
                writer.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving updates: " + e.getMessage());
            return;
        }

        JOptionPane.showMessageDialog(this, "Booking cancelled successfully.");
        loadConsultations(); 
    
    }//GEN-LAST:event_CancelButtonMASActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new studentMyAppointment("testStudentID").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButtonMAS;
    private javax.swing.JButton ConfirmButtonMAS;
    private javax.swing.JButton DBButtonMAS;
    private javax.swing.JButton HistoryButtonMAS;
    private javax.swing.JList<String> ListAAMAS;
    private javax.swing.JList<String> ListMAS;
    private javax.swing.JButton ResButtonMAS;
    private javax.swing.JButton ToResButtonMAS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
